/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Ozelogo.glb -o src/app/components/BackgroundComponent/Experience/models/Ozelogo.jsx --root public --types --shadows --keepnames --printwidth 120 --precision 3 
*/

import * as THREE from "three";
import React, { JSX, useMemo } from "react";
import { useGLTF, MeshTransmissionMaterial } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";

type GLTFResult = GLTF & {
  nodes: {
    Glass: THREE.Mesh;
    Logo: THREE.Mesh;
  };
  materials: {
    Glass: THREE.MeshStandardMaterial;
    Logo: THREE.MeshStandardMaterial;
  };
};

// Original component - will be used as a template for the instanced version
function OzelogoTemplate() {
  const { nodes } = useGLTF("/models/Ozelogo.glb") as GLTFResult;

  const transmissionConfig = useControls(
    "Glass",
    {
      transmission: { value: 1, min: 0, max: 1 },
      thickness: { value: 0.5, min: 0, max: 2 },
      roughness: { value: 0.3, min: 0, max: 1 },
      ior: { value: 1.5, min: 1, max: 2.3 },
      samples: { value: 3, min: 1, max: 32, step: 1 },
      resolution: { value: 256, min: 64, max: 2048, step: 64 },
      chromaticAberration: { value: 0.03, min: 0, max: 1 },
      anisotropicBlur: { value: 0.1, min: 0, max: 1 },
      distortion: { value: 0, min: 0, max: 1 },
      distortionScale: { value: 0.5, min: 0, max: 1 },
      temporalDistortion: { value: 0.0, min: 0, max: 1 },
      clearcoat: { value: 1, min: 0, max: 1 },
    },
    { collapsed: true }
  );

  const memoizedGeometries = useMemo(() => {
    return {
      glassGeometry: nodes.Glass.geometry,
      logoGeometry: nodes.Logo.geometry,
    };
  }, [nodes]);

  return (
    <>
      <mesh
        name="Glass"
        castShadow
        receiveShadow
        geometry={memoizedGeometries.glassGeometry}
      >
        <MeshTransmissionMaterial {...transmissionConfig} />
      </mesh>
      <mesh
        name="Logo"
        castShadow
        receiveShadow
        geometry={memoizedGeometries.logoGeometry}
      >
        <meshPhysicalMaterial
          color="#ffffff"
          metalness={1}
          roughness={0.05}
          envMapIntensity={1}
          clearcoat={1}
          clearcoatRoughness={0.1}
        />
      </mesh>
    </>
  );
}

// This is the component that will be used in your app
export function Ozelogo(props: JSX.IntrinsicElements["group"]) {
  // Use the original non-instanced version for simplicity
  // This preserves the parent-child relationship between Glass and Logo
  return (
    <group {...props} dispose={null}>
      <OzelogoTemplate />
    </group>
  );
}

useGLTF.preload("/models/Ozelogo.glb");
